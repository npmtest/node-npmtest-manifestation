{"/home/travis/build/npmtest/node-npmtest-manifestation/test.js":"/* istanbul instrument in package npmtest_manifestation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-manifestation/lib.npmtest_manifestation.js":"/* istanbul instrument in package npmtest_manifestation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_manifestation = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_manifestation = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-manifestation/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-manifestation && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_manifestation */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_manifestation\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_manifestation.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_manifestation.rollup.js'] =\n            local.assetsDict['/assets.npmtest_manifestation.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_manifestation.__dirname + '/lib.npmtest_manifestation.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/index.js":"'use strict';\n\nconst Request = require('request');\nconst Async = require('async');\n\nconst Manifestation = (opts, callback) => {\n\n  // we just want to do all of our work off of an HTML string, so if we are\n  // given a URL, go and download it, then restart with the result\n\n  if (!opts.html && opts.url) {\n    Request({\n      url: opts.url,\n      headers: {\n        'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2763.0 Safari/537.36'\n      }\n    }, (err, response, body) => {\n\n      if (err) {\n        return callback(err);\n      }\n\n      opts.url = response.request.href;\n\n      if (!body.length) {\n        callback(new Error('empty body recieved for ' + opts.url + '. nothing to build from.'));\n      }\n\n      Manifestation({ url: opts.url, html: body }, callback);\n    });\n  }\n  else if (opts.html) {\n    // we have the url, and the html - lets do this thing\n    const manifest = {};\n\n    const funcs = [\n      'Dir',\n      'Lang',\n      'Name',\n      'Icons',\n      'Scope',\n      'Display',\n      'Start_url',\n      'Short_name',\n      'Theme_color',\n      'Description',\n      'Orientation',\n      'Background_color',\n      'Related_applications',\n      'Prefer_related_applications'\n    ].map((name) => {\n\n      return (cb) => {\n\n        require('./scrapers/' + name.toLowerCase())(opts, (e, r) => {\n\n          manifest[name.toLowerCase()] = r;\n          cb(e, r);\n        });\n      };\n    });\n\n    Async.parallel(funcs, (e) => callback(e, manifest) );\n\n  }\n  else {\n    callback(new Error('Need a URL or HTML in order to work'));\n  }\n};\n\nmodule.exports = Manifestation;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/utils.js":"'use strict';\n\nconst StripCombiningMarks = require('strip-combining-marks');\nconst Punycode = require('punycode');\n\nconst toArrayBuffer = (buffer) => {\n\n  const ab = new ArrayBuffer(buffer.length);\n  const view = new Uint8Array(ab);\n  for (let i = 0; i < buffer.length; ++i) {\n    view[i] = buffer[i];\n  }\n  return ab;\n};\n\nconst toBuffer = (ab) => {\n\n  const buffer = new Buffer(ab.byteLength);\n  const view = new Uint8Array(ab);\n  for (let i = 0; i < buffer.length; ++i) {\n    buffer[i] = view[i];\n  }\n  return buffer;\n};\n\n\nconst realLength = (str) => Punycode.ucs2.decode(StripCombiningMarks(str)).length;\n\nmodule.exports = {\n  realLength: realLength,\n  toBuffer: toBuffer,\n  toArrayBuffer: toArrayBuffer\n};\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/background_color.js":"'use strict';\nconst Cheerio = require('cheerio');\n\nconst background_color = (obj, callback) => {\n\n  const $ = Cheerio.load(obj.html);\n\n  const msTileColor = $('meta[name=msapplication-TileColor]').attr('content');\n\n  const backgroundColor = msTileColor || 'transparent';\n\n  if (callback) {\n    callback(null, backgroundColor);\n  }\n\n  return backgroundColor;\n};\n\nmodule.exports = background_color;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/description.js":"'use strict';\nconst Cheerio = require('cheerio');\n\nconst description = (obj, callback) => {\n\n  const $ = Cheerio.load(obj.html);\n  let desc = $('meta[name=\"description\"]').attr('content');\n  const abstract = $('meta[name=\"abstract\"]').attr('content');\n  const topic = $('meta[name=\"topic\"]').attr('content');\n  const summary = $('meta[name=\"summary\"]').attr('content');\n  const subj = $('meta[name=\"subject\"]').attr('content');\n  const dcDesc = $('meta[name=\"dc.description\"]').attr('content');\n  const ogDesc = $('meta[property=\"og:description\"]').attr('content');\n  const twitterDesc = $('meta[property=\"twitter:description\"]').attr('content');\n  const schemaDesc = $('meta[itemprop=\"description\"]').attr('content');\n  const msToolTip = $('meta[name=msapplication-tooltip]').attr('content');\n\n  desc = desc || dcDesc || subj || abstract || summary || ogDesc || twitterDesc || schemaDesc || msToolTip || topic || '';\n\n  if (callback) {\n    callback(null, desc);\n  }\n\n  return desc;\n};\n\nmodule.exports = description;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/dir.js":"'use strict';\nconst Cheerio = require('cheerio');\n\nconst Lang = require('./lang');\n\nconst rtlLangs = [\n  'ar', //Arabic\n  'az', //Azerbaijani\n  'dv', //Divehi, Dhivehi, Maldivian\n  'fa', //Persian\n  'he', //Hebrew\n  'jv', //Javanese\n  'kk', //Kazakh\n  'ks', //Kashmiri\n  'ku', //Kurdish\n  'ml', //Malayalam\n  'ms', //Malay\n  'pa', //Panjabi, Punjabi\n  'ps', //Pushto, Pashto\n  'sd', //Sindhi\n  'so', //Somali\n  'tk', //Turkmen\n  'ug', //Uighur, Uyghur\n  'ur', //Urdu\n  'yi'  //Yiddish\n];\n\nconst direction = (obj, callback) => {\n\n  const html = obj.html;\n  const $ = Cheerio.load(html);\n\n  // do the cheap check up front. If they declare it, we use it\n  const declaredDir = $('html[dir]').attr('dir');\n\n  if (declaredDir) {\n    callback(null, declaredDir);\n  }\n  else {\n    // if they did not declare a dir attr, we check to see if most of characters\n    // in the page's corpus are known RTL unicode characters\n\n    // we want the text of the body, which includes the text of <scripts>, which\n    // throws off the calculation since JS is latin chars. So we strip them out\n    const $body = $('body').clone();\n    $body.find('script').remove();\n\n    // strip out whitespace too\n    const text = $body.text().replace(/\\s/g, '');\n\n    const rtlRegex = /[\\u0590-\\u083F]|[\\u08A0-\\u08FF]|[\\uFB1D-\\uFDFF]|[\\uFE70-\\uFEFF]/mg;\n    const rtlChars = text.match(rtlRegex);\n    let  mostlyRtl;\n\n    if (rtlChars) {\n      mostlyRtl = rtlChars.length / text.length > 0.4;\n    }\n\n    if (mostlyRtl) {\n      callback(null, 'rtl');\n    }\n    else {\n      // if we aren't sure that it is RTL, we finally check the for the language\n      // of the page, then return the result based off of that country code\n\n      Lang(obj, (err, result) => {\n\n        if (result) {\n          const dir = rtlLangs.indexOf(result) > -1 ? 'rtl' : 'ltr';\n          callback(err, dir);\n        }\n      });\n    }\n  }\n};\n\nmodule.exports = direction;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/lang.js":"'use strict';\nconst Cheerio = require('cheerio');\nconst Cld = require('cld');\nconst TldExtract = require('tld-extract');\n\nconst language = (obj, callback) => {\n\n  const html = obj.html;\n  const $ = Cheerio.load(html);\n\n  let declaredLang = $('html[lang]').attr('lang');\n\n  if (!declaredLang) {\n    declaredLang = $('html[xml\\\\:lang]').attr('xml:lang');\n  }\n\n  if (!declaredLang) {\n    declaredLang = $('meta[name=\"language\"]').attr('content');\n  }\n\n  if (!declaredLang) {\n    declaredLang = $('meta[name=\"dc.language\"]').attr('content');\n  }\n\n  // if they declare the lang attr, we assume they know what they are talking about\n  if (declaredLang) {\n    callback(null, declaredLang);\n  }\n  else {\n    let lang;\n\n    const options = {\n      isHTML: true,\n      tldHint: obj.url && TldExtract(obj.url).tld\n    };\n\n    // otherwise, we load the page, and use Google's cld to try to detect it\n    Cld.detect(html, options, (err, result) => {\n\n      if (!err && result.reliable) {\n        lang = result.languages[0].code;\n      }\n      else if (err) {\n        console.warn(err);\n      }\n\n      // if we were unable to identify the language, or the results are not\n      // considered reliable, re return undefined\n      // don't return the actual error as we don't want to stop parsing as a result\n\n      callback(null, lang);\n    });\n  }\n};\n\nmodule.exports = language;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/display.js":"'use strict';\nconst Cheerio = require('cheerio');\n\nconst display = (obj, callback) => {\n\n  const $ = Cheerio.load(obj.html);\n\n  //fullscreen\n  const qqFullScreen = $('[name=x5-fullscreen][content=true]');\n  const ucFullScreen = $('meta[name=full-screen][content=yes]');\n\n  const fullscreen = !!$().add(qqFullScreen).add(ucFullScreen).length;\n\n  //standalone\n  const qqStandalone = $('[name=x5-page-mode][content=\"app\"]');\n  const ucStandalone = $('[name=browsermode][content=application]');\n  const iosStandalone = $('[name=apple-mobile-web-app-capable][content=yes]');\n  const androidStandalone = $('[name=mobile-web-app-capable][content=yes]');\n\n\n  const standalone = !!$().add(qqStandalone).add(ucStandalone).add(iosStandalone).add(androidStandalone).length;\n\n  //minimal-ui\n  const minimal = !!$('[name=viewport][content*=minimal-ui]').length;\n\n\n  const _display = (fullscreen && 'fullscreen')\n    || (standalone && 'standalone')\n    || (minimal && 'minimal-ui')\n    || 'browser';\n\n  if (callback) {\n    callback(null, _display);\n  }\n\n  return _display;\n};\n\nmodule.exports = display;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/icons.js":"'use strict';\nconst Url = require('url');\nconst Async = require('async');\nconst IcoJS = require('icojs');\nconst Cheerio = require('cheerio');\nconst Request = require('request');\nconst ImgSize = require('image-size');\nconst ImgType = require('image-type');\nconst Mime = require('mime-types').lookup;\nconst FileType = require('file-type');\nconst _flatten = require('lodash/flattenDeep');\nconst _filter = require('lodash/filter');\n\nconst Util = require('../utils');\n\nconst isIco = (url) => {\n\n  return url.match(/\\.ico$/);\n};\n\nconst imgInfo = (url, callback) => {\n\n  Request.get({ url, encoding: null }, (err, response, imgBuffer) => {\n\n    let result;\n\n    if (err || response.statusCode !== 200) {\n      callback();\n      return console.error(err || new Error('Response code for ' + url + ' was ' + response.statusCode));\n    }\n\n    if (imgBuffer && FileType(imgBuffer) !== null) {\n      const dimensions = ImgSize(imgBuffer);\n\n      result = {\n        src: Url.parse(url).href,\n        type: ImgType(imgBuffer).mime,\n        sizes: dimensions.width + 'x' + dimensions.height\n      };\n    }\n\n    callback(null, result);\n  });\n};\n\nconst icoInfo = (url, callback) => {\n\n  Request.get({ url, encoding: null }, (err, response, imgBuffer) => {\n\n    if (err || response.statusCode !== 200) {\n      callback();\n      return console.log(err || new Error('response code for ' + url + ' was ' + response.statusCode));\n    }\n\n    const icoBuffer = Util.toArrayBuffer(imgBuffer);\n\n    try {\n      IcoJS.parse(icoBuffer).then((imgs) => {\n\n        const sizes = imgs.map((img) => {\n\n          const dim = ImgSize(Util.toBuffer(img.buffer));\n          return dim.width + 'x' + dim.height;\n        }).join(' ');\n\n        return callback(null, {\n          src: Url.parse(url).path,\n          sizes: sizes\n        });\n      }).catch((e) => {\n\n        if (e.toString() === 'Error: buffer is not ico') {\n          imgInfo(url, callback);\n        }\n        else {\n          callback(e, []);\n        }\n      });\n    }\n    catch (e) {\n      console.error(e);\n      console.error(url);\n      callback();\n    }\n  });\n};\n\nconst processAppConfig = (url, callback) => {\n\n  Request.get({ url }, (err, response, body) => {\n\n    if (err) {\n      callback(err);\n    }\n\n    const $ = Cheerio.load(body);\n    let appConfigIcons = [\n      $('square70x70logo'),\n      $('square150x150logo'),\n      $('square310x310logo'),\n      $('wide310x150logo')\n    ];\n\n    appConfigIcons = appConfigIcons\n      .filter((arr) => arr.length)\n      .map(($icon) => {\n\n        const src = $icon.attr('src');\n        let size = $icon.prop('tagName');\n        size = size.toLowerCase().match(/\\d+x\\d+/)[0];\n\n        return {\n          sizes: size,\n          src: src,\n          type: Mime(src)\n        };\n      });\n\n    callback(null, appConfigIcons);\n  });\n};\n\nconst processFavicon = (url, callback) => {\n\n  if (isIco(url)) {\n    icoInfo(url, callback);\n  }\n  else {\n    imgInfo(url, callback);\n  }\n};\n\n\nconst icons = (obj, iconsCallback) => {\n\n  const $ = Cheerio.load(obj.html);\n\n  const favicon = $('[rel=\"shortcut icon\"]').attr('href') || '/favicon.ico';\n  const msAppConfig = $('[name=msapplication-config]').attr('content') || '/browserconfig.xml';\n  const windowsTile = $('[name=msapplication-TileImage]').attr('content');\n  const iosIcons = $('[rel=icon], [rel=apple-touch-icon], [rel=apple-touch-icon-precomposed]').map((i, elm) => ({\n    href: $(elm).attr('href'),\n    sizes: $(elm).attr('sizes')\n  }));\n\n  const processIcons = (icon, cb) => {\n\n    const href = icon.href;\n    const sizes = icon.sizes;\n    const url = Url.resolve(obj.url, href);\n\n    if (icon.sizes) {\n      cb(null, {\n        src: href,\n        sizes: sizes,\n        type: Mime(href)\n      });\n    }\n    else {\n      return isIco(url) ? icoInfo(url, cb) : imgInfo(url, cb);\n    }\n  };\n\n  const toProcess = [{\n    type: windowsTile,\n    func: imgInfo\n  }, {\n    type: favicon,\n    func: processFavicon\n  }, {\n    type: msAppConfig,\n    func: processAppConfig\n  }].filter((icon) => icon.type && icon.type.length);\n\n  Async.parallel([\n    (parallelCb) => {\n\n      Async.map(toProcess, (iconType, cb) => {\n\n        const url = Url.resolve(obj.url, iconType.type);\n        iconType.func(url, cb);\n      }, parallelCb);\n    },\n    (parallelCb) => {\n\n      Async.map(iosIcons, processIcons, parallelCb);\n    }\n  ], (err, results) => {\n\n    iconsCallback(err, _filter(_flatten(results)));\n  });\n};\n\nmodule.exports = icons;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/name.js":"'use strict';\nconst Cheerio = require('cheerio');\nconst XRegExp = require('xregexp');\n\nconst Util = require('../utils');\n\nconst getName = (obj, callback) => {\n\n  const $ = Cheerio.load(obj.html);\n  const appName = $('meta[name=\"application-name\"]').attr('content');\n  const appLinkName = $('meta[property=\"al:ios:app_name\"], meta[property=\"al:android:app_name\"]').attr('content');\n  const ogSiteName = $('meta[property=\"og:site_name\"]').attr('content');\n  const schemaName = $('meta[itemprop=\"name\"]').attr('content');\n  const title = $('title').text();\n\n  let name = appName || appLinkName || schemaName || ogSiteName || title;\n\n  if (Util.realLength(name) > 45) {\n    // name has a max length of 45 characters. if we are greater than that, strip\n    // down to 44 chars, and add a unicode ellipsis\n    name = name.match(XRegExp('(\\\\pS|\\\\p{L}\\\\p{M}|[A-Za-z0-9\\\\s]|[\\\\!\\\\\"\\\\#\\\\$\\\\%\\\\&\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.\\\\/\\\\:\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\[\\\\]\\\\^\\\\_\\\\{\\\\|\\\\}\\\\~]){0,44}', 'xA'))[0] + '…';\n  }\n\n  if (callback) {\n    callback(null, name);\n  }\n\n  return name;\n};\n\nmodule.exports = getName;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/orientation.js":"'use strict';\nconst Cheerio = require('cheerio');\n\nconst orientation = (obj, callback) => {\n\n  const $ = Cheerio.load(obj.html);\n\n  //fullscreen\n  const qqFullScreen = $('[name=x5-orientation]').attr('content');\n  const ucFullScreen = $('[name=screen-orientation]').attr('content');\n\n  const _orientation = qqFullScreen || ucFullScreen || 'any';\n\n  if (callback) {\n    callback(null, _orientation);\n  }\n\n  return _orientation;\n};\n\nmodule.exports = orientation;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/prefer_related_applications.js":"'use strict';\nconst RelatedApplications = require('./related_applications');\n\nconst prefer_related_applications = (obj, callback) => {\n\n  const preferRelatedApplications = !!RelatedApplications(obj).length;\n\n  if (callback) {\n    callback(null, preferRelatedApplications);\n  }\n\n  return preferRelatedApplications;\n};\n\nmodule.exports = prefer_related_applications;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/related_applications.js":"'use strict';\nconst Cheerio = require('cheerio');\n\nconst related_applications = (obj, callback) => {\n\n  const $ = Cheerio.load(obj.html);\n  const relatedApplications = [];\n\n  // iOS\n  const iosAppLink = $('[rel=alternate][href*=\"ios-app://\"]').attr('content');\n  const appLinksIosId = $('[property=\"al:ios:app_store_id\"]').attr('content');\n  const appleItunesApp = $('meta[name=\"apple-itunes-app\"]').attr('content');\n  const appLinksIosUrl = $('[property=\"al:ios:url\"]').attr('content');\n\n  if (appleItunesApp || iosAppLink || appLinksIosId) {\n    let itunesId;\n    if (appleItunesApp) {\n      itunesId = appleItunesApp.match(/(app-id\\s*=)\\s*([^,\\s]*)/)[2];\n    }\n    else if (iosAppLink) {\n      itunesId = iosAppLink.match(/ios-app\\:\\/\\/([^/]*)\\/[\\s\\S]*$/);\n      itunesId = itunesId && itunesId[1];\n    }\n    else {\n      itunesId = appLinksIosId;\n    }\n\n    const itunesUrl = appLinksIosUrl || 'https://itunes.apple.com/app/id' + itunesId;\n\n    relatedApplications.push({\n      'platform': 'itunes',\n      'url': itunesUrl\n    });\n  }\n\n  // android\n  const appLinksAndroidId = $('[property=\"al:android:package\"]').attr('content');\n  const androidAppLink = $('[rel=alternate][href*=\"android-app://\"]').attr('content');\n\n  if (androidAppLink || appLinksAndroidId) {\n    let androidId;\n\n    if (androidAppLink) {\n      androidId = androidAppLink;\n    }\n    else if (androidAppLink) {\n      androidId = androidAppLink.match(/android-app\\:\\/\\/([^/]*)\\/[\\s\\S]*$/);\n      androidId = androidId && androidId[1];\n    }\n\n    relatedApplications.push({\n      platform: 'play',\n      url: 'https://play.google.com/store/apps/details?id=' + androidId,\n      id: androidId\n    });\n  }\n\n  // windows\n  const windowsId = $('meta[name=msApplication-PackageFamilyName]').attr('content');\n\n  if (windowsId) {\n    relatedApplications.push({\n      'platform': 'windows',\n      'url': 'ms-windows-store://pdp?PFN=' + windowsId\n    });\n  }\n\n  if (callback) {\n    callback(null, relatedApplications);\n  }\n\n  return relatedApplications;\n};\n\nmodule.exports = related_applications;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/scope.js":"'use strict';\nconst IsURL = require('valid-url').is_web_uri;\nconst Url = require('url');\n\nconst scope = (obj, callback) => {\n\n  const url = obj.url;\n  let _scope;\n\n  if (url && !IsURL(url)) {\n    // if the url exists and is not a valid wbe url (e.g. /foo), then\n    // its probably the scope we want to use\n    _scope = url;\n  }\n  else if (IsURL(url)) {\n    // if we have a valid url, then its more liekly that we were given the homepage\n    // for the app. So the path is the most liekly canidate for the scope\n    _scope = Url.parse(url).path;\n  }\n  else {\n    // I can't think of a better default\n    _scope = '/';\n  }\n\n  if (callback) {\n    callback(null, _scope);\n  }\n\n  return _scope;\n};\n\nmodule.exports = scope;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/short_name.js":"'use strict';\nconst Cheerio = require('cheerio');\nconst XRegExp = require('xregexp');\nconst Util = require('../utils');\n\nconst Name = require('./name');\n\nconst shortName = (obj, callback) => {\n\n  const html = obj.html;\n  const $ = Cheerio.load(html);\n  const appName = $('meta[name=\"application-name\"]').attr('content');\n  const iosAppLinkTitle = $('meta[apple-mobile-web-app-title]').attr('content');\n  const appLinkName = $('meta[property=\"al:ios:app_name\"], meta[property=\"al:android:app_name\"]').attr('content');\n  const ogSiteName = $('meta[property=\"og:site_name\"]').attr('content');\n  const schemaName = $('meta[itemprop=\"name\"]').attr('content');\n  const title = $('title').text();\n  let shortestName;\n\n  const longName = Name(obj);\n\n  let longNames = [\n    iosAppLinkTitle,\n    longName,\n    appName,\n    appLinkName,\n    ogSiteName,\n    schemaName,\n    title\n  ];\n\n  // strip out combining characters to get a more accurate symbol count\n  const longNameLength = Util.realLength(longName);\n\n  if (longNameLength <= 15) {\n\n    // we don't need a second shortname if longName is 15 chars are less\n    callback(null, longName);\n\n  }\n  else {\n\n    // the name is too long, so we try to find the shortest version of available names\n    longNames = longNames.sort((a, b) => {\n\n      a.length > b.length ? 1 : -1;\n    });\n\n    // if the shortest of the names if 15 or less, we use that\n    shortestName = longNames.filter((name) => name && Util.realLength(name) <= 15)[0];\n\n\n    // Otherwise we just punt, and take the shortest of the options, and truncate\n    // it to 15\n    if (!shortestName) {\n      shortestName = longNames[0].match(XRegExp('(\\\\pS|\\\\p{L}\\\\p{M}|[A-Za-z0-9\\\\s]|[\\\\!\\\\\"\\\\#\\\\$\\\\%\\\\&\\'\\\\(\\\\)\\\\*\\\\+\\\\,\\\\-\\\\.\\\\/\\\\:\\\\;\\\\<\\\\=\\\\>\\\\?\\\\@\\\\[\\\\]\\\\^\\\\_\\\\{\\\\|\\\\}\\\\~]){0,15}', 'xA'))[0];\n    }\n\n    callback(null, shortestName);\n  }\n};\n\nmodule.exports = shortName;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/start_url.js":"'use strict';\nconst Cheerio = require('cheerio');\nconst IsURL = require('valid-url').is_web_uri;\nconst Url = require('url');\n\nconst start_url = (opts, callback) => {\n\n  const $ = Cheerio.load(opts.html);\n  const url = opts.url;\n\n  let startUrl = $('link[rel=start]').attr('href');\n\n  if (!startUrl) {\n    startUrl = $('[name=msapplication-starturl]').attr('content');\n  }\n\n  if (!startUrl) {\n    if (url && !IsURL(url)) {\n      // if the url exists and is not a valid wbe url (e.g. /foo), then\n      // its probably the start_url we want to use\n      startUrl = url;\n    }\n    else if (IsURL(url)) {\n      // if we have a valid url, then its more likely that we were given the homepage\n      // for the app. So the path is the most likely canidate for the start_url\n      startUrl = Url.parse(url).path;\n    }\n    else {\n      // I can't think of a better default\n      startUrl = '/';\n    }\n  }\n\n  if (callback) {\n    callback(null, startUrl);\n  }\n\n  return startUrl;\n};\n\nmodule.exports = start_url;\n","/home/travis/build/npmtest/node-npmtest-manifestation/node_modules/manifestation/lib/scrapers/theme_color.js":"'use strict';\nconst Cheerio = require('cheerio');\n\nconst theme_color = (obj, callback) => {\n\n  const $ = Cheerio.load(obj.html);\n\n  const androidThemeColor = $('meta[name=theme-color]').attr('content');\n  // since folks seem to use tilecolor and TileColor, we have toLowerCase to get a case insensitive match\n  const msTileColor = $('meta[name]').filter((i, e) => $(e).attr('name').toLowerCase() === 'msapplication-tilecolor').attr('content');\n  let iosStatusStyling = $('meta[name=apple-mobile-web-app-status-bar-style]').attr('content');\n\n  if (iosStatusStyling && iosStatusStyling === 'black-translucent') {\n    iosStatusStyling = 'rgba(0,0,0,0.5)';\n  }\n\n  const themeColor = androidThemeColor || iosStatusStyling || msTileColor || 'transparent';\n\n  if (callback) {\n    callback(null, themeColor);\n  }\n\n  return themeColor;\n};\n\nmodule.exports = theme_color;\n"}